# -*- coding: utf-8 -*-
from __future__ import print_function
import datetime as dt
import logging

from . import Property, PropertyDefinition, BaseType, dateTimeBase

__all__ = ['{{t.classname}}', ]

{% if t.primitive in ('str', 'int', 'float') %}
class {{t.classname}}(BaseType):
    """Autogenerated {{t.classname}} type."""
    
    value = Property(PropertyDefinition('value', {{t.primitive}}, '1', '1', 'xmlAttr'))
    
    def __init__(self, value=None):
        """Initialize a new {{t.classname}} instance."""
        if value is not None:
            value = {{t.primitive}}(value)

        super({{t.classname}}, self).__init__(value)
    
    def __{{t.primitive}}__(self):
        return {{t.primitive}}(self.value)

    {% for m, p in methods.items() %}
    {% if t.primitive in p %}
    def __{{m}}__(self, other):
        {% if m == 'eq' %}
        if self.value is None or other is None:
            return self.value is None and other is None
        {% elif m == 'ne' %}
        if self.value is None or other is None:
            return not (self.value is None and other is None)
        {% endif %}
        if isinstance(other, {{t.classname}}):
            return self.value.__{{m}}__(other.value)
        elif isinstance(other, {{t.primitive}}):
            return self.value.__{{m}}__(other)
        
        return self.value.__{{m}}__(other)
        
    {% endif %}
    {% endfor %}
    {% if t.primitive in ['str', 'int', 'float'] %}
    def __add__(self, other):
        if isinstance(other, {{t.classname}}):
            return {{t.classname}}(self.value.__add__(other.value))
        elif isinstance(other, {{t.primitive}}):
            return self.value.__add__(other)
        
        return self.value.__add__(other)
        
    __radd__ = __add__
    
    {% endif %}    
    {% if t.primitive in ['int', 'float'] %}
    def __div__(self, other):
        """x / y <==> x.__div__(y)"""
        if isinstance(other, {{t.primitive}}) or isinstance(other, {{t.classname}}):
            return {{t.classname}}({{t.primitive}}(self).__div__({{t.primitive}}(other)))
            
        return other.__rdiv__({{t.primitive}}(self))

    def __rdiv__(self, other):
        """y / x <==> x.__rdiv__(y)"""
        if isinstance(other, {{t.primitive}}) or isinstance(other, {{t.classname}}):
            return {{t.classname}}({{t.primitive}}(self).__rdiv__({{t.primitive}}(other)))
            
        return other.__div__({{t.primitive}}(self))
    
    {% endif %}
    {% if t.primitive in ['str', 'int', 'float'] %}
    def __mul__(self, other):
        """x * y <==> x.__mul__(y)"""
        {% if t.primitive in ('str', 'float') %}
        return {{t.classname}}({{t.primitive}}(self).__mul__(other))
        {% else %}
        if isinstance(other, {{t.primitive}}) or isinstance(other, {{t.classname}}):
            return {{t.classname}}({{t.primitive}}(self).__mul__({{t.primitive}}(other)))
            
        return other.__mul__({{t.primitive}}(self))
        {% endif %}

    def __rmul__(self, other):
        """y * x <==> x.__rmul__(y)"""
        {% if t.primitive in ('str', 'float') %}
        return {{t.classname}}({{t.primitive}}(self).__mul__(other))
        {% else %}
        if isinstance(other, {{t.primitive}}) or isinstance(other, {{t.classname}}):
            return {{t.classname}}({{t.primitive}}(self).__mul__({{t.primitive}}(other)))
            
        return other.__rmul__({{t.primitive}}(self))
        {% endif %}
    {% endif %}


{% elif t.primitive in ('bool', ) %}
class boolean_(int):
    def __repr__(self):
        if self:
            return "true"
        else:
            return "false"
    
    __str__ = __repr__

class boolean(BaseType):
    """Adapted from https://www.python.org/dev/peps/pep-0285/"""
    
    value = Property(PropertyDefinition('value', boolean_, '1', '1', 'xmlAttr'))
    
    def __init__(self, value):
        if value == "true":
            value = 1
        elif value == "false":
            value = 0
        
        super(boolean, self).__init__(value)
    
    def __repr__(self):
        if self.value:
            return "true"
        else:
            return "false"

    __str__ = __repr__

    def __eq__(self, other):
        if self.value is None or other is None:
            return self.value is None and other is None

        return bool(int(self.value) == int(other))

    def __and__(self, other):
        if isinstance(other, bool) or isinstance(other, boolean):
            return bool(int(self.value) & int(other))
        else:
            return int.__and__(self, other)

    __rand__ = __and__

    def __or__(self, other):
        if isinstance(other, bool):
            return bool(int(self.value) | int(other))
        else:
            return int.__or__(self, other)

    __ror__ = __or__

    def __xor__(self, other):
        if isinstance(other, bool):
            return bool(int(self.value) ^ int(other))
        else:
            return int.__xor__(self.value, other)

    __rxor__ = __xor__
    
    def toNative(self):
        """Overrides BaseType.toNative()."""
        return bool(self.value)
    
    

{% elif t.classname in ['date', 'time', 'dateTime', 'instant'] %}
class {{t.classname}}(dateTimeBase):
    """Autogenerated {{t.classname}} type."""
    _regex = {% if t.regex == None %}None{% else %}'{{t.regex}}'{% endif %}
    
    # value = Property(PropertyDefinition('value', {{t.primitive}}, '1', '1', 'xmlAttr'))
    value = Property(PropertyDefinition('value', str, '1', '1', 'xmlAttr'))

{% else %}
class {{t.classname}}(BaseType):
    """Autogenerated {{t.classname}} type."""
    value = Property(PropertyDefinition('value', {{t.primitive}}, '1', '1', 'xmlAttr'))
{% endif %}


